plugins {
    id "java"
    id "c"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
    id 'edu.wpi.first.GradleJni' version '0.3.0'
}

def ROBOT_CLASS = "frc.team5104.main.BreakerRobotController"

deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(5104)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
	compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    //testCompile 'junit:junit:4.12'
    compile 'jaci.jniloader:JNILoader:1.0.1'
}

repositories {
    maven {
        url 'https://dev.imjac.in/maven'
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '5.0'
//}

model {
    components {
        pathfinderjni(JniNativeLibrarySpec) {
            enableCheckTask true
            javaCompileTasks << compileJava

            sources {
                c {
                    source {
                        srcDir 'src/native/c'
                        include '**/*.c'
                    }
                    lib project: ':Pathfinder-Core', library: 'pathfinder', linkage: 'static'
                }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}